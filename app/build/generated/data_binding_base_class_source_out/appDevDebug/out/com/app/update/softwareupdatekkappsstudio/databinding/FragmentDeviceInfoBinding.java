// Generated by view binder compiler. Do not edit!
package com.app.update.softwareupdatekkappsstudio.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.utils.widget.ImageFilterView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.app.update.softwareupdatekkappsstudio.R;
import com.google.android.material.appbar.AppBarLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDeviceInfoBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout actionBar;

  @NonNull
  public final ImageFilterView backDevice;

  @NonNull
  public final ImageView btnInAppForwardDevice;

  @NonNull
  public final CardView cardView2;

  @NonNull
  public final FrameLayout deviceNativeAdOrBanner;

  @NonNull
  public final TextView tvBluetoothMacAddress;

  @NonNull
  public final TextView tvBoard;

  @NonNull
  public final TextView tvBrand;

  @NonNull
  public final TextView tvBuildFingerPrint;

  @NonNull
  public final TextView tvCompanyName;

  @NonNull
  public final TextView tvDevice;

  @NonNull
  public final TextView tvDeviceId;

  @NonNull
  public final TextView tvDeviceManufacturer;

  @NonNull
  public final TextView tvDeviceModel;

  @NonNull
  public final TextView tvDeviceName;

  @NonNull
  public final TextView tvDeviceName1;

  @NonNull
  public final TextView tvDeviceType;

  @NonNull
  public final TextView tvGAdvertisingId;

  @NonNull
  public final TextView tvGSFId;

  @NonNull
  public final TextView tvHardware;

  @NonNull
  public final TextView tvHardwareSerial;

  @NonNull
  public final TextView tvNetworkOperator;

  @NonNull
  public final TextView tvNetworkType;

  @NonNull
  public final TextView tvUsbDebugging;

  @NonNull
  public final TextView tvWifiMacAddress;

  @NonNull
  public final View viewBattery;

  private FragmentDeviceInfoBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppBarLayout actionBar, @NonNull ImageFilterView backDevice,
      @NonNull ImageView btnInAppForwardDevice, @NonNull CardView cardView2,
      @NonNull FrameLayout deviceNativeAdOrBanner, @NonNull TextView tvBluetoothMacAddress,
      @NonNull TextView tvBoard, @NonNull TextView tvBrand, @NonNull TextView tvBuildFingerPrint,
      @NonNull TextView tvCompanyName, @NonNull TextView tvDevice, @NonNull TextView tvDeviceId,
      @NonNull TextView tvDeviceManufacturer, @NonNull TextView tvDeviceModel,
      @NonNull TextView tvDeviceName, @NonNull TextView tvDeviceName1,
      @NonNull TextView tvDeviceType, @NonNull TextView tvGAdvertisingId, @NonNull TextView tvGSFId,
      @NonNull TextView tvHardware, @NonNull TextView tvHardwareSerial,
      @NonNull TextView tvNetworkOperator, @NonNull TextView tvNetworkType,
      @NonNull TextView tvUsbDebugging, @NonNull TextView tvWifiMacAddress,
      @NonNull View viewBattery) {
    this.rootView = rootView;
    this.actionBar = actionBar;
    this.backDevice = backDevice;
    this.btnInAppForwardDevice = btnInAppForwardDevice;
    this.cardView2 = cardView2;
    this.deviceNativeAdOrBanner = deviceNativeAdOrBanner;
    this.tvBluetoothMacAddress = tvBluetoothMacAddress;
    this.tvBoard = tvBoard;
    this.tvBrand = tvBrand;
    this.tvBuildFingerPrint = tvBuildFingerPrint;
    this.tvCompanyName = tvCompanyName;
    this.tvDevice = tvDevice;
    this.tvDeviceId = tvDeviceId;
    this.tvDeviceManufacturer = tvDeviceManufacturer;
    this.tvDeviceModel = tvDeviceModel;
    this.tvDeviceName = tvDeviceName;
    this.tvDeviceName1 = tvDeviceName1;
    this.tvDeviceType = tvDeviceType;
    this.tvGAdvertisingId = tvGAdvertisingId;
    this.tvGSFId = tvGSFId;
    this.tvHardware = tvHardware;
    this.tvHardwareSerial = tvHardwareSerial;
    this.tvNetworkOperator = tvNetworkOperator;
    this.tvNetworkType = tvNetworkType;
    this.tvUsbDebugging = tvUsbDebugging;
    this.tvWifiMacAddress = tvWifiMacAddress;
    this.viewBattery = viewBattery;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDeviceInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDeviceInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_device_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDeviceInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_bar;
      AppBarLayout actionBar = ViewBindings.findChildViewById(rootView, id);
      if (actionBar == null) {
        break missingId;
      }

      id = R.id.backDevice;
      ImageFilterView backDevice = ViewBindings.findChildViewById(rootView, id);
      if (backDevice == null) {
        break missingId;
      }

      id = R.id.btn_inAppForwardDevice;
      ImageView btnInAppForwardDevice = ViewBindings.findChildViewById(rootView, id);
      if (btnInAppForwardDevice == null) {
        break missingId;
      }

      id = R.id.cardView2;
      CardView cardView2 = ViewBindings.findChildViewById(rootView, id);
      if (cardView2 == null) {
        break missingId;
      }

      id = R.id.deviceNativeAdOrBanner;
      FrameLayout deviceNativeAdOrBanner = ViewBindings.findChildViewById(rootView, id);
      if (deviceNativeAdOrBanner == null) {
        break missingId;
      }

      id = R.id.tvBluetoothMacAddress;
      TextView tvBluetoothMacAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvBluetoothMacAddress == null) {
        break missingId;
      }

      id = R.id.tvBoard;
      TextView tvBoard = ViewBindings.findChildViewById(rootView, id);
      if (tvBoard == null) {
        break missingId;
      }

      id = R.id.tvBrand;
      TextView tvBrand = ViewBindings.findChildViewById(rootView, id);
      if (tvBrand == null) {
        break missingId;
      }

      id = R.id.tvBuildFingerPrint;
      TextView tvBuildFingerPrint = ViewBindings.findChildViewById(rootView, id);
      if (tvBuildFingerPrint == null) {
        break missingId;
      }

      id = R.id.tvCompanyName;
      TextView tvCompanyName = ViewBindings.findChildViewById(rootView, id);
      if (tvCompanyName == null) {
        break missingId;
      }

      id = R.id.tvDevice;
      TextView tvDevice = ViewBindings.findChildViewById(rootView, id);
      if (tvDevice == null) {
        break missingId;
      }

      id = R.id.tvDeviceId;
      TextView tvDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceId == null) {
        break missingId;
      }

      id = R.id.tvDeviceManufacturer;
      TextView tvDeviceManufacturer = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceManufacturer == null) {
        break missingId;
      }

      id = R.id.tvDeviceModel;
      TextView tvDeviceModel = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceModel == null) {
        break missingId;
      }

      id = R.id.tvDeviceName;
      TextView tvDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceName == null) {
        break missingId;
      }

      id = R.id.tvDeviceName1;
      TextView tvDeviceName1 = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceName1 == null) {
        break missingId;
      }

      id = R.id.tvDeviceType;
      TextView tvDeviceType = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceType == null) {
        break missingId;
      }

      id = R.id.tvGAdvertisingId;
      TextView tvGAdvertisingId = ViewBindings.findChildViewById(rootView, id);
      if (tvGAdvertisingId == null) {
        break missingId;
      }

      id = R.id.tvGSFId;
      TextView tvGSFId = ViewBindings.findChildViewById(rootView, id);
      if (tvGSFId == null) {
        break missingId;
      }

      id = R.id.tvHardware;
      TextView tvHardware = ViewBindings.findChildViewById(rootView, id);
      if (tvHardware == null) {
        break missingId;
      }

      id = R.id.tvHardwareSerial;
      TextView tvHardwareSerial = ViewBindings.findChildViewById(rootView, id);
      if (tvHardwareSerial == null) {
        break missingId;
      }

      id = R.id.tvNetworkOperator;
      TextView tvNetworkOperator = ViewBindings.findChildViewById(rootView, id);
      if (tvNetworkOperator == null) {
        break missingId;
      }

      id = R.id.tvNetworkType;
      TextView tvNetworkType = ViewBindings.findChildViewById(rootView, id);
      if (tvNetworkType == null) {
        break missingId;
      }

      id = R.id.tvUsbDebugging;
      TextView tvUsbDebugging = ViewBindings.findChildViewById(rootView, id);
      if (tvUsbDebugging == null) {
        break missingId;
      }

      id = R.id.tvWifiMacAddress;
      TextView tvWifiMacAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvWifiMacAddress == null) {
        break missingId;
      }

      id = R.id.viewBattery;
      View viewBattery = ViewBindings.findChildViewById(rootView, id);
      if (viewBattery == null) {
        break missingId;
      }

      return new FragmentDeviceInfoBinding((ConstraintLayout) rootView, actionBar, backDevice,
          btnInAppForwardDevice, cardView2, deviceNativeAdOrBanner, tvBluetoothMacAddress, tvBoard,
          tvBrand, tvBuildFingerPrint, tvCompanyName, tvDevice, tvDeviceId, tvDeviceManufacturer,
          tvDeviceModel, tvDeviceName, tvDeviceName1, tvDeviceType, tvGAdvertisingId, tvGSFId,
          tvHardware, tvHardwareSerial, tvNetworkOperator, tvNetworkType, tvUsbDebugging,
          tvWifiMacAddress, viewBattery);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
